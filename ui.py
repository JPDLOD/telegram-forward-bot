# -*- coding: utf-8 -*-
"""
ui.py
-----
Construcci√≥n de textos/teclados y handlers de UI.
"""

from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from typing import List

import publisher  # <<< usamos el m√≥dulo, no importamos ACTIVE_BACKUP por valor
from config import TARGET_CHAT_ID, BACKUP_CHAT_ID, PREVIEW_CHAT_ID


# ===== Keyboards =====
def kb_main() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("üìã Listar", callback_data="m:list"),
             InlineKeyboardButton("üì¶ Enviar", callback_data="m:send")],
            [InlineKeyboardButton("üß™ Preview", callback_data="m:preview"),
             InlineKeyboardButton("‚è∞ Programar", callback_data="m:sched")],
            [InlineKeyboardButton("‚öôÔ∏è Ajustes", callback_data="m:settings")]
        ]
    )

def kb_settings() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("üîÄ Backup ON/OFF", callback_data="m:toggle_backup")],
            [InlineKeyboardButton("‚¨ÖÔ∏è Volver", callback_data="m:back")]
        ]
    )

def kb_schedule() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("‚è≥ +5 min", callback_data="s:+5"),
             InlineKeyboardButton("‚è≥ +15 min", callback_data="s:+15")],
            [InlineKeyboardButton("üïó Hoy 20:00", callback_data="s:today20"),
             InlineKeyboardButton("üåÖ Ma√±ana 07:00", callback_data="s:tom07")],
            [InlineKeyboardButton("üóí Ver programados", callback_data="s:list"),
             InlineKeyboardButton("‚ùå Cancelar todos", callback_data="s:clear")],
            [InlineKeyboardButton("‚úçÔ∏è Custom", callback_data="s:custom"),
             InlineKeyboardButton("‚¨ÖÔ∏è Volver", callback_data="m:back")]
        ]
    )


# ===== Textos =====
def text_main() -> str:
    return (
        "üõ†Ô∏è Acciones r√°pidas:\n"
        "‚Ä¢ /listar ‚Äî muestra borradores pendientes\n"
        "‚Ä¢ /enviar ‚Äî publica ahora a targets activos\n"
        "‚Ä¢ /preview ‚Äî manda la cola a PREVIEW sin marcarla como enviada\n"
        "‚Ä¢ /programar YYYY-MM-DD HH:MM ‚Äî programa lo que est√° en /listar (no mezcla con lo nuevo)\n"
        "‚Ä¢ /programados ‚Äî ver pendientes programados ¬∑ /desprogramar <id|all>\n"
        "‚Ä¢ /nuke ‚Ä¶  ‚Ä¢ /cancelar  ‚Ä¢ /eliminar  ‚Ä¢ /id [id]\n"
        "Pulsa un bot√≥n o usa /comandos para volver a ver este panel."
    )

def _onoff(val: bool) -> str:
    return "ON" if val else "OFF"

def text_settings() -> str:
    # leemos SIEMPRE del m√≥dulo publisher (√∫nica fuente de verdad)
    return (
        f"üì° **Targets**\n"
        f"‚Ä¢ Principal: `{TARGET_CHAT_ID}` **ON** (fijo)\n"
        f"‚Ä¢ Backup   : `{BACKUP_CHAT_ID}` **{_onoff(publisher.is_backup_on())}**\n"
        f"‚Ä¢ Preview  : `{PREVIEW_CHAT_ID}`\n\n"
        "Usa el bot√≥n para alternar backup.\n"
        "‚¨ÖÔ∏è *Volver* regresa al men√∫ principal."
    )


# ===== helpers de env√≠o de paneles =====
async def send_help_with_buttons(context):
    from config import SOURCE_CHAT_ID
    await context.bot.send_message(SOURCE_CHAT_ID, text_main(), reply_markup=kb_main())

async def send_settings_panel(context):
    from config import SOURCE_CHAT_ID
    await context.bot.send_message(SOURCE_CHAT_ID, text_settings(), reply_markup=kb_settings(), parse_mode="Markdown")


# ===== handlers de comandos UI relacionados al backup =====
async def handle_backup_command(context, arg: str):
    """
    /backup on|off
    Cambia el estado global en publisher y vuelve a mostrar el panel.
    """
    from config import SOURCE_CHAT_ID
    v = (arg or "").strip().lower()
    if v in ("on", "1", "true", "si", "s√≠"):
        publisher.set_active_backup(True)
    elif v in ("off", "0", "false", "no"):
        publisher.set_active_backup(False)
    else:
        await context.bot.send_message(SOURCE_CHAT_ID, "Usa: /backup on|off")
        return
    # mostrar panel con estado actualizado
    await send_settings_panel(context)
