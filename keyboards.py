# -*- coding: utf-8 -*-
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from config import TARGET_CHAT_ID, BACKUP_CHAT_ID, PREVIEW_CHAT_ID
from publisher import is_active_backup

def kb_main() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("üìã Listar", callback_data="m:list"),
             InlineKeyboardButton("üì¶ Enviar", callback_data="m:send")],
            [InlineKeyboardButton("üß™ Preview", callback_data="m:preview"),
             InlineKeyboardButton("‚è∞ Programar", callback_data="m:sched")],
            [InlineKeyboardButton("‚öôÔ∏è Ajustes", callback_data="m:settings")]
        ]
    )

def text_main() -> str:
    return (
        "üõ†Ô∏è Comandos:\n"
        "‚Ä¢ /listar ‚Äî muestra **borradores pendientes** (excluye programados) con su `id` para operar.\n"
        "‚Ä¢ /enviar ‚Äî publica **ahora** los borradores a los targets activos (principal y, si est√° ON, backup).\n"
        "‚Ä¢ /preview ‚Äî env√≠a toda la cola a **PREVIEW** sin marcar como enviada (√∫til para revisar antes de publicar).\n"
        "‚Ä¢ /programar YYYY-MM-DD HH:MM ‚Äî programa lo que est√° en **/listar** (formato 24h, sin AM/PM). Bloquea esos IDs y no se mezclan con nuevos.\n"
        "‚Ä¢ /programados ‚Äî muestra **programaciones pendientes** con hora (TZ) y cantidad de mensajes.\n"
        "‚Ä¢ /desprogramar <id|all> ‚Äî cancela **una** programaci√≥n por id o **todas** las programaciones pendientes.\n"
        "‚Ä¢ /cancelar <id> ‚Äî (o responde con /cancelar) saca **de la cola** un borrador (no lo borra del canal).\n"
        "‚Ä¢ /deshacer [id] ‚Äî revierte el √∫ltimo **/cancelar** (o el id indicado). No aplica si se us√≥ /eliminar.\n"
        "‚Ä¢ /eliminar <id> ‚Äî (o responde) **borra del canal** y lo quita de la cola definitivamente. [alias: /del, /delete, /remove, /borrar]\n"
        "‚Ä¢ /nuke all|todos ‚Äî elimina **todos** los borradores pendientes.\n"
        "‚Ä¢ /nuke 1,3,5 ‚Äî elimina las posiciones indicadas de **/listar**.\n"
        "‚Ä¢ /nuke 2-7 ‚Äî elimina un **rango** de posiciones de **/listar**.\n"
        "‚Ä¢ /nuke N ‚Äî elimina los **√∫ltimos N** pendientes.\n"
        "‚Ä¢ /id [id] ‚Äî si respondes a un mensaje con /id te muestra su ID; con par√°metro, te da el enlace directo.\n"
        "‚Ä¢ /canales ‚Äî IDs y **estado de targets** (principal fijo ON, backup ON/OFF, preview).\n"
        "‚Ä¢ /backup on|off ‚Äî activa o desactiva **solo** el backup (el principal siempre ON).\n"
        "‚Ä¢ Atajo bot√≥n `@@@ T√çTULO | URL` ‚Äî borra esa l√≠nea en BORRADOR y a√±ade un **bot√≥n** al √∫ltimo borrador pendiente con ese T√çTULO ‚Üí URL.\n"
        "\nPulsa un bot√≥n o usa /comandos para ver este panel nuevamente."
    )

def kb_settings() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("üîÄ Backup ON/OFF", callback_data="m:toggle_backup")],
            [InlineKeyboardButton("‚¨ÖÔ∏è Volver", callback_data="m:back")]
        ]
    )

def text_settings() -> str:
    onoff = "ON" if is_active_backup() else "OFF"
    return (
        f"üì° **Targets**\n"
        f"‚Ä¢ Principal: `{TARGET_CHAT_ID}` **ON** (fijo)\n"
        f"‚Ä¢ Backup   : `{BACKUP_CHAT_ID}` **{onoff}**\n"
        f"‚Ä¢ Preview  : `{PREVIEW_CHAT_ID}`\n\n"
        "Usa el bot√≥n para alternar backup.\n"
        "‚¨ÖÔ∏è *Volver* regresa al men√∫ principal."
    )

def kb_schedule() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("‚è≥ +5 min", callback_data="s:+5"),
             InlineKeyboardButton("‚è≥ +15 min", callback_data="s:+15")],
            [InlineKeyboardButton("üïó Hoy 20:00", callback_data="s:today20"),
             InlineKeyboardButton("üåÖ Ma√±ana 07:00", callback_data="s:tom07")],
            [InlineKeyboardButton("üóí Ver programados", callback_data="s:list"),
             InlineKeyboardButton("‚ùå Cancelar todos", callback_data="s:clear")],
            [InlineKeyboardButton("‚úçÔ∏è Custom", callback_data="s:custom"),
             InlineKeyboardButton("‚¨ÖÔ∏è Volver", callback_data="m:back")]
        ]
    )

def text_schedule() -> str:
    return (
        "‚è∞ Programar env√≠o de **los borradores actuales**.\n"
        "Elige un atajo o usa `/programar YYYY-MM-DD HH:MM` (formato 24h: 00:00‚Äì23:59, sin '(24h)' ni AM/PM).\n"
        "‚ö†Ô∏è Si no hay borradores, no se programa nada."
    )
